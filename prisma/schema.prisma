generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  EDITOR
  CUSTOMER
  GUEST
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String?
  phone        String?
  passwordHash String?   @map("password_hash")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         Role
  tokens       Token[]
  accounts     Account[]
  addresses    Address[]
  Order        Order[]

  @@map("user")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")

  @@map("token")
}

enum AccountProvider {
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("account")
}

model Address {
  id         String  @id @default(uuid())
  customer   User    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String  @map("customer_id")
  street     String
  complement String?
  number     String?
  district   String?
  city       String
  state      String
  postalCode String
  country    String  @default("BR")

  isDefault Boolean @default(false)
  Order     Order[]

  @@map("address")
}

// catalog
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}

model Product {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  description  String?
  tags         String?
  emphases     Boolean?
  price        Decimal       @db.Decimal(12, 2)
  comparePrice Decimal?      @map("compare_price") @db.Decimal(12, 2)
  status       ProductStatus @default(DRAFT)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  images     ProductImage[]
  categories ProductCategory[]
  variants   ProductVariant[]
  OrderItem  OrderItem[]
  Option     Option[]

  @@map("product")
}

model ProductImage {
  id            String       @id @default(uuid())
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String       @map("product_id")
  url           String
  alt           String?
  sortOrder     Int          @default(0)
  optionValue   OptionValue? @relation(fields: [optionValueId], references: [id], onDelete: SetNull)
  optionValueId String?      @map("option_value_id")
  createdAt     DateTime     @default(now()) @map("created_at")

  @@map("product_image")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products ProductCategory[]
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @map("product_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([productId, categoryId])
}

model ProductVariant {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @map("product_id")
  sku          String?  @unique
  price        Decimal? @db.Decimal(12, 2) // se vazio, usa o pre√ßo base do produto
  comparePrice Decimal? @map("compare_price") @db.Decimal(12, 2)
  stock        Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  optionValues VariantOptionValue[]
  orderItems   OrderItem[]

  @@map("product_variant")
}

model Option {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  name      String // exemplo: "Cor", "Tamanho"

  values OptionValue[]

  @@unique([productId, name])
}

model OptionValue {
  id       String @id @default(uuid())
  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String @map("option_id")
  value    String // exemplo: "Azul", "M"

  variantValues VariantOptionValue[]
  ProductImage  ProductImage[]

  @@unique([optionId, value])
}

model VariantOptionValue {
  id            String         @id @default(uuid())
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     String         @map("variant_id")
  optionValue   OptionValue    @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  optionValueId String         @map("option_value_id")

  @@unique([variantId, optionValueId])
}

// pedidos

model Order {
  id         String      @id @default(uuid())
  customer   User?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId String?     @map("customer_id")
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  items     OrderItem[]
  address   Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId String?

  @@map("order")
}

model OrderItem {
  id        String          @id @default(uuid())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String          @map("order_id")
  product   Product         @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId String          @map("product_id")
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId String?         @map("variant_id")
  quantity  Int             @default(1)
  unitPrice Decimal         @db.Decimal(12, 2)

  @@map("order_item")
}
