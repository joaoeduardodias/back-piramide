generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String?
  phone        String?
  passwordHash String?   @map("password_hash")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         Role
  accounts     Account[]
  addresses    Address[]
  Order        Order[]
  tokens       Token[]

  @@map("user")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@map("account")
}

model Address {
  id         String  @id @default(uuid())
  customerId String  @map("customer_id")
  street     String
  complement String?
  number     String?
  district   String?
  city       String
  state      String
  postalCode String
  country    String  @default("BR")
  isDefault  Boolean @default(false)
  customer   User    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Order      Order[]

  @@map("address")
}

model Product {
  id             String            @id @default(uuid())
  name           String
  slug           String            @unique
  description    String?
  price          Decimal           @db.Decimal(12, 2)
  status         ProductStatus     @default(DRAFT)
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  comparePrice   Decimal?          @map("compare_price") @db.Decimal(12, 2)
  tags           String?
  weight         Float?
  featured       Boolean?
  sales          Float
  brandId        String?           @map("brand_id")
  OrderItem      OrderItem[]
  brand          Brand?            @relation(fields: [brandId], references: [id])
  categories     ProductCategory[]
  images         ProductImage[]
  productOptions ProductOption[]
  variants       ProductVariant[]

  @@map("product")
}

model ProductImage {
  id            String       @id @default(uuid())
  productId     String       @map("product_id")
  url           String
  alt           String?
  sortOrder     Int          @default(0)
  optionValueId String?      @map("option_value_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  fileKey       String?      @map("file_key")
  optionValue   OptionValue? @relation(fields: [optionValueId], references: [id])
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_image")
}

model Category {
  id        String            @id @default(uuid())
  name      String
  slug      String            @unique
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  products  ProductCategory[]

  @@map("category")
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("brand")
}

model ProductCategory {
  productId  String   @map("product_id")
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_category")
}

model ProductVariant {
  id           String               @id @default(uuid())
  productId    String               @map("product_id")
  sku          String               @unique
  price        Decimal?             @db.Decimal(12, 2)
  stock        Int                  @default(0)
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  comparePrice Decimal?             @map("compare_price") @db.Decimal(12, 2)
  orderItems   OrderItem[]
  product      Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionValues VariantOptionValue[]

  @@map("product_variant")
}

model Option {
  id       String          @id @default(uuid())
  name     String          @unique
  values   OptionValue[]
  products ProductOption[]

  @@map("options")
}

model OptionValue {
  id                 String               @id @default(uuid())
  optionId           String               @map("option_id")
  value              String
  content            String?
  option             Option               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  productImage       ProductImage[]
  productOptionValue ProductOptionValue[]
  variantValues      VariantOptionValue[]

  @@unique([optionId, value])
  @@map("option_value")
}

model ProductOption {
  id        String               @id @default(uuid())
  productId String               @map("product_id")
  optionId  String               @map("option_id")
  option    Option               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@unique([productId, optionId])
  @@map("product_option")
}

model ProductOptionValue {
  id              String        @id @default(uuid())
  productOptionId String        @map("product_option_id")
  optionValueId   String        @map("option_value_id")
  optionValue     OptionValue   @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  productOption   ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)

  @@unique([productOptionId, optionValueId])
  @@map("product_option_value")
}

model VariantOptionValue {
  id            String         @id @default(uuid())
  variantId     String         @map("variant_id")
  optionValueId String         @map("option_value_id")
  optionValue   OptionValue    @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionValueId])
  @@map("variant_option_value")
}

model Order {
  id         String      @id @default(uuid())
  customerId String?     @map("customer_id")
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  addressId  String?
  address    Address?    @relation(fields: [addressId], references: [id])
  customer   User?       @relation(fields: [customerId], references: [id])
  items      OrderItem[]

  @@map("order")
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String          @map("order_id")
  productId String          @map("product_id")
  variantId String?         @map("variant_id")
  quantity  Int             @default(1)
  unitPrice Decimal         @db.Decimal(12, 2)
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_item")
}

enum Role {
  ADMIN
  MANAGER
  EDITOR
  CUSTOMER
  GUEST
}

enum TokenType {
  PASSWORD_RECOVER
}

enum AccountProvider {
  GOOGLE
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}
